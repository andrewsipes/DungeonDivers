// "Circle.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Circle.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Circle_version_
const char Circle_version[4] = { '0','1','9','d' };
#define _Circle_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Circle_vertexcount_
const unsigned Circle_vertexcount = 32;
#define _Circle_vertexcount_
#endif
#ifndef _Circle_indexcount_
const unsigned Circle_indexcount = 90;
#define _Circle_indexcount_
#endif
#ifndef _Circle_materialcount_
const unsigned Circle_materialcount = 1; // can be used for batched draws
#define _Circle_materialcount_
#endif
#ifndef _Circle_meshcount_
const unsigned Circle_meshcount = 1;
#define _Circle_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Circle_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Circle_vertices[32] =
{
	{	{ 0.195090f, -0.980785f, -0.000000f },	{ 0.402455f, 0.990393f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.195090f, 0.980785f, -0.000000f },	{ 0.597545f, 0.009607f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.980785f, -0.195090f, -0.000000f },	{ 0.990393f, 0.597545f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.195090f, 0.980785f, -0.000000f },	{ 0.402455f, 0.009607f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.000000f, 1.000000f, -0.000000f },	{ 0.500000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.555570f, 0.831470f, -0.000000f },	{ 0.222215f, 0.084265f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.382683f, 0.923880f, -0.000000f },	{ 0.308658f, 0.038060f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.831470f, 0.555570f, -0.000000f },	{ 0.084265f, 0.222215f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.707107f, 0.707107f, -0.000000f },	{ 0.146447f, 0.146447f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.980785f, 0.195090f, -0.000000f },	{ 0.009607f, 0.402455f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.923880f, 0.382683f, -0.000000f },	{ 0.038060f, 0.308658f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.980785f, -0.195090f, -0.000000f },	{ 0.009607f, 0.597545f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 1.000000f, 0.000000f, -0.000000f },	{ 0.000000f, 0.500000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.831470f, -0.555570f, -0.000000f },	{ 0.084265f, 0.777785f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.923880f, -0.382683f, -0.000000f },	{ 0.038060f, 0.691342f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.555570f, -0.831470f, -0.000000f },	{ 0.222215f, 0.915735f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.707107f, -0.707107f, -0.000000f },	{ 0.146447f, 0.853553f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.382683f, -0.923880f, -0.000000f },	{ 0.308658f, 0.961940f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.195090f, -0.980785f, -0.000000f },	{ 0.597545f, 0.990393f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ 0.000000f, -1.000000f, -0.000000f },	{ 0.500000f, 1.000000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.555570f, -0.831470f, -0.000000f },	{ 0.777785f, 0.915735f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.382683f, -0.923880f, -0.000000f },	{ 0.691342f, 0.961940f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.831470f, -0.555570f, -0.000000f },	{ 0.915735f, 0.777785f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.707107f, -0.707107f, -0.000000f },	{ 0.853553f, 0.853553f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.923880f, -0.382683f, -0.000000f },	{ 0.961940f, 0.691342f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.980785f, 0.195090f, -0.000000f },	{ 0.990393f, 0.402455f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -1.000000f, 0.000000f, -0.000000f },	{ 1.000000f, 0.500000f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.831470f, 0.555570f, -0.000000f },	{ 0.915735f, 0.222215f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.923880f, 0.382683f, -0.000000f },	{ 0.961940f, 0.308658f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.555570f, 0.831470f, -0.000000f },	{ 0.777785f, 0.084265f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.707107f, 0.707107f, -0.000000f },	{ 0.853553f, 0.146447f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
	{	{ -0.382683f, 0.923880f, -0.000000f },	{ 0.691342f, 0.038060f, 0.000000f },	{ -0.000000f, -0.000000f, 1.000000f }	},
};
#define _Circle_vertices_
#endif
#ifndef _Circle_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Circle_indices[90] =
{
	 0, 1, 2,
	 1, 3, 4,
	 3, 5, 6,
	 5, 7, 8,
	 7, 9, 10,
	 9, 11, 12,
	 11, 13, 14,
	 13, 15, 16,
	 15, 0, 17,
	 0, 18, 19,
	 18, 20, 21,
	 20, 22, 23,
	 22, 2, 24,
	 2, 25, 26,
	 25, 27, 28,
	 27, 29, 30,
	 29, 1, 31,
	 1, 5, 3,
	 5, 9, 7,
	 9, 13, 11,
	 13, 0, 15,
	 0, 20, 18,
	 20, 2, 22,
	 2, 27, 25,
	 27, 1, 29,
	 1, 9, 5,
	 9, 0, 13,
	 0, 2, 20,
	 2, 1, 27,
	 1, 0, 9,
};
#define _Circle_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Circle_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Circle_materials[1] =
{
	{
		{{ 0.048125f, 0.803217f, 0.000000f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		250.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material.016",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Circle_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Circle_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Circle_batches[1][2] =
{
	{ 90, 0 },
};
#define _Circle_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Circle_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Circle_meshes[1] =
{
	{
		"default",
		90,
		0,
		0,
	},
};
#define _Circle_meshes_
#endif
